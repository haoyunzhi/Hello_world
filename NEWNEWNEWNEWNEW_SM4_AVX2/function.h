#pragma once
#include <immintrin.h> //AVX AVX2
#include <wmmintrin.h>
#include <emmintrin.h>
#include <smmintrin.h>

//table
#ifndef _SM4_H_
#define _SM4_H_
#include <stdio.h>
#include <string.h>
const unsigned char TBL_SBOX[256] = {
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
};
#endif

//Types
#define u64 unsigned long long
#define u256 __m256i
//Intrinsics
#define XOR _mm256_xor_si256
#define AND _mm256_and_si256
#define SHIFTR64(x, y) _mm256_srli_epi64(x, y)
#define SHIFTL64(x, y) _mm256_slli_epi64(x, y)
//Mask
#define MASK1 _mm256_set_epi32(0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa)
#define MASK2 _mm256_set_epi32(0xcccccccc, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0xcccccccc, 0xcccccccc)
#define MASK4 _mm256_set_epi32(0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0)
#define MASK32 _mm256_set_epi32(0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000)
#define MASK64 _mm256_set_epi32(0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000)
//Swapmove
#define SWAPMOVE(a, b, mask, shift) \
{ \
	u256 T = AND(XOR(SHIFTL64(a, shift), b), mask); \
	b = XOR(b, T); \
    a = XOR(a, SHIFTR64(T, shift)); \
}
//Swap move for shifting by 64
#define SWAPMOVEBY64(a, b, mask) \
{ \
	u256 T = AND(XOR(_mm256_shuffle_epi8(a, _mm256_set_epi8(23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,31,30,29,28,27,26,25,24)), b), mask); \
	b = XOR(b, T); \
    a = XOR(a, _mm256_shuffle_epi8(T, _mm256_set_epi8(7,6,5,4,3,2,1,0,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8))); \
}

//call
__m256i From128To256(__m128i src128);
__m128i From256To128(__m256i src256);
__m256i* ENC_ROUND0(__m256i pt[32], __m256i k[8]);
__m256i* ENC_ROUND1(__m256i pt[32], __m256i k[8]);
__m256i* ENC_ROUND2(__m256i pt[32], __m256i k[8]);
__m256i* ENC_ROUND3(__m256i pt[32], __m256i k[8]);
void gfmul(__m128i adam, __m128i evan, __m128i* res);
void reduce4(__m128i H1, __m128i H2, __m128i H3, __m128i H4, __m128i X1, __m128i X2, __m128i X3, __m128i X4, __m128i* res);
__m128i Rbit128(__m128i x);
void four_uCh2uLong(unsigned char* in, unsigned long* out);
void uLong2four_uCh(unsigned long in, unsigned char* out);
unsigned long move(unsigned long data, int length);
unsigned long func_data(unsigned long input);
unsigned long* SM4_LUT(unsigned long ulKeyList[32], unsigned long ulInitialInput[4]);

//sm4: enc+trans
unsigned int SM4(__m256i x[32], __m256i key[32][8]); //back0

//sm+: enc
unsigned int SM4PLUS(__m256i pt[32], __m256i key[32][8]); //back1

//ctr: enc+trans
unsigned int SM4_CTR(__m256i NONCE96[32], __m256i key[32][8], __m256i over[32]); //back2

//ctr+: enc+trans_forward
unsigned int SM4_CTRPLUS(__m256i NONCE96[32], __m256i key[32][8], __m256i over[32]); //back3

//gcm (based on ctr): enc+trans
unsigned int SM4_GCM(__m128i IV, __m256i NONCE96[32], __m256i key[32][8], __m256i over[32], unsigned long ulInitialInput[4], unsigned long ulKeyList1[32], unsigned long ulKeyList2[32]); //back4

//gcm+ (based on ctr+): enc+trans_forward
unsigned int SM4_GCMPLUS(__m128i IV, __m256i NONCE96[32], __m256i key[32][8], __m256i over[32], unsigned long ulInitialInput[4], unsigned long ulKeyList1[32], unsigned long ulKeyList2[32]); //back5


